name: Update News Headlines with Fallacy Analysis

on:
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write

jobs:
  update-headlines:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Fetch, analyze, and save headlines
        env:
          GNEWS_API_KEY: ${{ secrets.GNEWS_API_KEY }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        run: |
          cat <<'EOL' > fetch-analyze.js
          const https = require('https');
          const fs = require('fs');

          const GNEWS_API_KEY = process.env.GNEWS_API_KEY;
          const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;
          const GNEWS_API_URL = `https://gnews.io/api/v4/top-headlines?category=general&lang=en&country=us&max=10&apikey=${GNEWS_API_KEY}`;

          function makeRequest(url, options = {}) {
            return new Promise((resolve, reject) => {
              const req = https.request(url, options, (res) => {
                let data = '';
                res.on('data', (chunk) => (data += chunk));
                res.on('end', () => {
                  try {
                    resolve(JSON.parse(data));
                  } catch (error) {
                    resolve(data); // Return raw data if not JSON
                  }
                });
              });
              req.on('error', reject);
              if (options.body) {
                req.write(options.body);
              }
              req.end();
            });
          }

          async function analyzeHeadline(headline, fallacyDefinitions) {
            const fallacyList = Object.keys(fallacyDefinitions).join('", "');
            const prompt = `Analyze the following news headline for logical fallacies: "${headline}"

          Please respond with a JSON object in this exact format:
          {
            "containsFallacy": true/false,
            "fallacy": "type of fallacy if found, or null",
            "explanation": "A brief explanation of why it is a fallacy, or null if no fallacy is found."
          }

          IMPORTANT: If you identify a fallacy, the value for the "fallacy" key MUST be an exact match from the following list: "${fallacyList}".

          If the headline does not contain a fallacy from that specific list, you MUST set "containsFallacy" to false and "fallacy" to null. Do not identify fallacies that are not on this list.
          Only return the JSON object and nothing else.`;

            const requestBody = JSON.stringify({
              model: 'openai/gpt-3.5-turbo',
              messages: [{ role: 'user', content: prompt }],
              temperature: 0.3,
              max_tokens: 200,
            });

            const options = {
              method: 'POST',
              headers: {
                Authorization: `Bearer ${OPENROUTER_API_KEY}`,
                'Content-Type': 'application/json',
                'HTTP-Referer': 'https://github.com/Alviz-git/Media-Litteracy',
                'X-Title': 'Media Literacy Fallacy Detection',
              },
              body: requestBody,
            };

            try {
              const response = await makeRequest('https://openrouter.ai/api/v1/chat/completions', options);
              console.log('Raw API response:', JSON.stringify(response, null, 2));

              if (response.choices && response.choices[0] && response.choices[0].message) {
                const content = response.choices[0].message.content.trim();
                try {
                  const jsonMatch = content.match(/\{[\s\S]*\}/);
                  if (jsonMatch) {
                    const analysis = JSON.parse(jsonMatch[0]);
                    if (analysis.fallacy && !Object.keys(fallacyDefinitions).includes(analysis.fallacy)) {
                      console.log(`Warning: AI returned a fallacy "${analysis.fallacy}" not in the defined list. Overriding.`);
                      analysis.containsFallacy = false;
                      analysis.fallacy = null;
                    }
                    return analysis;
                  }
                  throw new Error('No JSON object found in response');
                } catch (parseError) {
                  console.error(`Failed to parse analysis for "${headline}":`, content, parseError);
                  return { containsFallacy: false, fallacy: null, explanation: `Parsing failed: ${parseError.message}` };
                }
              } else {
                console.error(`No valid choices in API response for "${headline}"`);
                return { containsFallacy: false, fallacy: null, explanation: 'Invalid API response structure.' };
              }
            } catch (error) {
              console.error(`Error analyzing "${headline}":`, error.message);
              return { containsFallacy: false, fallacy: null, explanation: error.message };
            }
          }

          async function main() {
            try {
              const fallacyDefinitions = JSON.parse(fs.readFileSync('data/fallacy-definitions.json', 'utf8'));
              console.log('Fetching headlines...');
              const newsData = await makeRequest(GNEWS_API_URL);

              if (!newsData.articles || newsData.articles.length === 0) {
                console.error('No articles found in GNews API response:', newsData);
                process.exit(1);
              }

              console.log(`Found ${newsData.articles.length} headlines. Analyzing...`);
              const analyzedHeadlines = [];

              for (const [index, article] of newsData.articles.entries()) {
                console.log(`Analyzing headline ${index + 1}/${newsData.articles.length}: ${article.title}`);
                const analysis = await analyzeHeadline(article.title, fallacyDefinitions);

                analyzedHeadlines.push({
                  ...article,
                  containsFallacy: analysis.containsFallacy || false,
                  fallacy: analysis.fallacy || null,
                  explanation: analysis.explanation || null,
                });

                if (index < newsData.articles.length - 1) {
                  await new Promise((resolve) => setTimeout(resolve, 1000)); // 1s delay
                }
              }

              const fallacyHeadlines = analyzedHeadlines.filter((a) => a.containsFallacy);
              console.log(`Found ${fallacyHeadlines.length} headlines with fallacies.`);

              const output = {
                lastUpdated: new Date().toISOString(),
                totalAnalyzed: analyzedHeadlines.length,
                fallaciesFound: fallacyHeadlines.length,
                headlines: fallacyHeadlines,
              };

              if (!fs.existsSync('data')) fs.mkdirSync('data');
              fs.writeFileSync('data/headlines.json', JSON.stringify(output, null, 2));
              fs.writeFileSync('data/all-headlines.json', JSON.stringify({ ...output, headlines: analyzedHeadlines }, null, 2));
              console.log('Analysis complete. Files saved.');
            } catch (error) {
              console.error('Error in main function:', error);
              process.exit(1);
            }
          }

          main();
          EOL
          node fetch-analyze.js

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add data/headlines.json data/all-headlines.json
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update news headlines with fallacy analysis - $(date)"
            git push
          fi