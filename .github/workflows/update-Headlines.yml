name: Update News Headlines with Fallacy Analysis

on:
  workflow_dispatch: # Allow manual triggering
  # Comment for github

permissions:
  contents: write

jobs:
  update-headlines:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Fetch, analyze, and save headlines
        env:
          GNEWS_API_KEY: ${{ secrets.GNEWS_API_KEY }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        run: |
          cat <<'EOL' > fetch-analyze.js
          const https = require('https');
          const fs = require('fs');

          const GNEWS_API_KEY = process.env.GNEWS_API_KEY;
          const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;
          
          // Configuration - Targeted search queries for controversial topics
          const SEARCH_QUERIES = [
            // Gender and Transgender Issues
  '("transgender rights" OR "gender identity" OR "LGBTQ+ discrimination" OR "bathroom bills" OR "trans athletes" OR "gender ideology" OR "gender-affirming care" OR "preferred pronouns")',

  // Protests and Civil Unrest
  '("BLM protest" OR "civil unrest" OR "peaceful protest" OR "police brutality" OR "demonstrators" OR "antifa" OR "racial justice protest")',

  // Systemic Racism and Social Justice
  '("systemic racism" OR "racial equity" OR "white privilege" OR "critical race theory" OR "DEI programs" OR "diversity equity inclusion" OR "affirmative action")',

  // Immigration
  '("undocumented immigrants" OR "asylum seekers" OR "migrant rights" OR "border policy" OR "sanctuary cities" OR "family separation" OR "DACA" OR "immigration reform")',

  // Israel and Global Conflicts
  '("Israel-Palestine" OR "Gaza conflict" OR "pro-Palestinian protest" OR "Israel apartheid" OR "Middle East violence" OR "Hamas" OR "Israeli occupation")',

  // Climate Change and Environmental Policy
  '("climate crisis" OR "climate emergency" OR "global warming" OR "green new deal" OR "environmental justice" OR "fossil fuels divestment" OR "carbon neutrality")',

  // Elections and Political Campaigns
  '("election integrity" OR "voter suppression" OR "mail-in ballots" OR "gerrymandering" OR "voting rights act" OR "democracy in crisis" OR "campaign donations")',

  // Public Health (Vaccines, Pandemics)
  '("vaccine mandate" OR "public health order" OR "COVID-19 response" OR "anti-vax misinformation" OR "mask compliance" OR "pandemic policy" OR "boosters")',

  // Crime and Policing
  '("defund the police" OR "police accountability" OR "mass incarceration" OR "restorative justice" OR "bail reform" OR "criminal justice reform")',

  // Technology and AI
  '("AI ethics" OR "algorithmic bias" OR "social media moderation" OR "big tech regulation" OR "surveillance capitalism" OR "digital misinformation" OR "deepfakes")'
          ];

          // Keywords to exclude from searches
          const EXCLUDE_KEYWORDS = [
            'sports', 'entertainment', 'celebrity', 'movies', 'music', 'fashion', 
            'lifestyle', 'travel', 'food', 'recipes', 'gaming', 'streaming',
            'awards', 'hollywood', 'netflix', 'spotify', 'tiktok dance',
            'weather forecast', 'horoscope', 'astrology', 'lottery',
            'stock market daily', 'cryptocurrency price', 'bitcoin price'
          ];

          const ARTICLES_PER_REQUEST = 2; // Reduced to get more diverse content
          const TOTAL_REQUESTS = SEARCH_QUERIES.length;

          function makeRequest(url, options) {
            return new Promise((resolve, reject) => {
              const req = https.request(url, options, (res) => {
                let data = '';
                res.on('data', (chunk) => data += chunk);
                res.on('end', () => {
                  try {
                    resolve(JSON.parse(data));
                  } catch (error) {
                    reject(new Error(`Failed to parse JSON: ${error.message}`));
                  }
                });
              });
              req.on('error', reject);
              if (options.body) {
                req.write(options.body);
              }
              req.end();
            });
          }

          function containsExcludedKeywords(title, description) {
            const text = `${title} ${description || ''}`.toLowerCase();
            return EXCLUDE_KEYWORDS.some(keyword => text.includes(keyword.toLowerCase()));
          }

          async function fetchAllArticles() {
            const allArticles = [];
            
            for (const [index, query] of SEARCH_QUERIES.entries()) {
              console.log(`Fetching articles for query ${index + 1}/${SEARCH_QUERIES.length}: ${query.substring(0, 50)}...`);
              try {
                // Add exclude keywords to the query
                const excludeString = EXCLUDE_KEYWORDS.map(kw => `-${kw}`).join(' ');
                const fullQuery = `${query} ${excludeString}`;
                
                const url = `https://gnews.io/api/v4/search?q=${encodeURIComponent(fullQuery)}&lang=en&country=us&max=${ARTICLES_PER_REQUEST}&apikey=${GNEWS_API_KEY}`;
                const response = await makeRequest(url, { method: 'GET' });
                
                if (response.articles && Array.isArray(response.articles)) {
                  // Additional filtering to remove excluded content
                  const filteredArticles = response.articles.filter(article => 
                    !containsExcludedKeywords(article.title, article.description)
                  );
                  
                  allArticles.push(...filteredArticles);
                  console.log(`Fetched ${response.articles.length} articles, ${filteredArticles.length} after filtering`);
                } else {
                  console.warn(`No articles found for query: ${query.substring(0, 50)}...`);
                  if (response.error) {
                    console.error(`API Error: ${response.error}`);
                  }
                }
                
                // Add delay between requests to respect rate limits
                await new Promise(resolve => setTimeout(resolve, 1200));
              } catch (error) {
                console.error(`Error fetching articles for query "${query.substring(0, 50)}...":`, error.message);
              }
            }
            
            // Remove duplicates based on URL
            const uniqueArticles = allArticles.filter((article, index, self) => 
              index === self.findIndex(a => a.url === article.url)
            );
            
            console.log(`Total unique articles fetched: ${uniqueArticles.length}`);
            return uniqueArticles;
          }

          async function analyzeHeadline(headline, fallacyDefinitions) {
            const fallacyList = Object.keys(fallacyDefinitions).join('", "');
            const prompt = `Analyze the following news headline for logical fallacies: "${headline}"

          Please respond with a JSON object in this exact format:
          {
            "containsFallacy": true/false,
            "fallacy": "type of fallacy if found, or null",
            "explanation": "A brief explanation of why it is a fallacy, or null if no fallacy is found."
          }

          IMPORTANT: If you identify a fallacy, the value for the "fallacy" key MUST be an exact match from the following list: "${fallacyList}".

          If the headline does not contain a fallacy from that specific list, you MUST set "containsFallacy" to false and "fallacy" to null. Do not identify fallacies that are not on this list.
          Only return the JSON object and nothing else.`;

            const requestBody = JSON.stringify({
              model: 'mistralai/mistral-small-3.2-24b-instruct:free',
              messages: [{ role: 'user', content: prompt }],
              temperature: 0.3,
              max_tokens: 200,
            });

            const options = {
              method: 'POST',
              headers: {
                Authorization: `Bearer ${OPENROUTER_API_KEY}`,
                'Content-Type': 'application/json',
                'HTTP-Referer': 'https://github.com/Alviz-git/Media-Litteracy',
                'X-Title': 'Media Literacy Fallacy Detection',
              },
              body: requestBody,
            };

            try {
              const response = await makeRequest('https://openrouter.ai/api/v1/chat/completions', options);

              if (response.choices && response.choices[0] && response.choices[0].message) {
                const content = response.choices[0].message.content.trim();
                try {
                  const jsonMatch = content.match(/\{[\s\S]*\}/);
                  if (jsonMatch) {
                    const analysis = JSON.parse(jsonMatch[0]);
                    if (analysis.fallacy && !Object.keys(fallacyDefinitions).includes(analysis.fallacy)) {
                      console.log(`Warning: AI returned a fallacy "${analysis.fallacy}" not in the defined list. Overriding.`);
                      analysis.containsFallacy = false;
                      analysis.fallacy = null;
                    }
                    return analysis;
                  }
                  throw new Error('No JSON object found in response');
                } catch (parseError) {
                  console.error(`Failed to parse analysis for "${headline}":`, content, parseError);
                  return { containsFallacy: false, fallacy: null, explanation: `Parsing failed: ${parseError.message}` };
                }
              } else {
                console.error(`No valid choices in API response for "${headline}"`);
                if (response.error) {
                  console.error(`API Error: ${JSON.stringify(response.error)}`);
                }
                return { containsFallacy: false, fallacy: null, explanation: 'Invalid API response structure.' };
              }
            } catch (error) {
              console.error(`Error analyzing "${headline}":`, error.message);
              return { containsFallacy: false, fallacy: null, explanation: error.message };
            }
          }

          async function main() {
            try {
              const fallacyDefinitions = JSON.parse(fs.readFileSync('data/fallacy-definitions.json', 'utf8'));
              
              // Fetch all articles using targeted queries
              const allArticles = await fetchAllArticles();
              
              if (allArticles.length === 0) {
                console.error('No articles found across all API calls');
                process.exit(1);
              }

              console.log(`Analyzing ${allArticles.length} headlines...`);
              const analyzedHeadlines = [];

              for (const [index, article] of allArticles.entries()) {
                console.log(`Analyzing headline ${index + 1}/${allArticles.length}: ${article.title}`);
                const analysis = await analyzeHeadline(article.title, fallacyDefinitions);

                // Normalize the article structure to match your required format
                const normalizedArticle = {
                  title: article.title,
                  description: article.description,
                  url: article.url,
                  source: typeof article.source === 'string' ? article.source : (article.source?.name || 'Unknown'),
                  publishedAt: article.publishedAt,
                  image: article.image,
                  containsFallacy: analysis.containsFallacy || false,
                  fallacy: analysis.fallacy || null,
                  explanation: analysis.explanation || null,
                  analyzedAt: new Date().toISOString(),
                };

                analyzedHeadlines.push(normalizedArticle);

                // Add delay between analysis calls
                if (index < allArticles.length - 1) {
                  await new Promise((resolve) => setTimeout(resolve, 1000)); // 1s delay
                }
              }

              const fallacyHeadlines = analyzedHeadlines.filter((a) => a.containsFallacy);
              console.log(`Found ${fallacyHeadlines.length} headlines with fallacies out of ${analyzedHeadlines.length} total.`);

              // Load existing headlines if the file exists
              let existingData = { headlines: [] };
              const headlinesFilePath = 'data/headlines.json';
              
              if (fs.existsSync(headlinesFilePath)) {
                try {
                  existingData = JSON.parse(fs.readFileSync(headlinesFilePath, 'utf8'));
                  console.log(`Loaded ${existingData.headlines.length} existing headlines.`);
                } catch (error) {
                  console.warn('Could not parse existing headlines.json, starting fresh:', error.message);
                  existingData = { headlines: [] };
                }
              }

              // Filter out duplicates based on title and URL
              const existingUrls = new Set((existingData.headlines || []).map(h => h.url));
              const newFallacyHeadlines = fallacyHeadlines.filter(h => !existingUrls.has(h.url));
              
              console.log(`${newFallacyHeadlines.length} new unique headlines with fallacies to add.`);

              // Append new headlines to existing ones
              const allFallacyHeadlines = [...(existingData.headlines || []), ...newFallacyHeadlines];

              const output = {
                lastUpdated: new Date().toISOString(),
                totalAnalyzed: analyzedHeadlines.length,
                fallaciesFound: newFallacyHeadlines.length,
                totalFallacyHeadlines: allFallacyHeadlines.length,
                headlines: allFallacyHeadlines,
              };

              // Load existing all-headlines data
              let existingAllData = { headlines: [] };
              const allHeadlinesFilePath = 'data/all-headlines.json';
              
              if (fs.existsSync(allHeadlinesFilePath)) {
                try {
                  existingAllData = JSON.parse(fs.readFileSync(allHeadlinesFilePath, 'utf8'));
                  console.log(`Loaded ${existingAllData.headlines.length} existing all-headlines.`);
                } catch (error) {
                  console.warn('Could not parse existing all-headlines.json, starting fresh:', error.message);
                  existingAllData = { headlines: [] };
                }
              }

              // Filter out duplicates for all headlines
              const existingAllUrls = new Set((existingAllData.headlines || []).map(h => h.url));
              const newAllHeadlines = analyzedHeadlines.filter(h => !existingAllUrls.has(h.url));
              
              console.log(`${newAllHeadlines.length} new unique headlines (all) to add.`);

              // Append new headlines to existing ones
              const allHeadlines = [...(existingAllData.headlines || []), ...newAllHeadlines];

              const allOutput = {
                lastUpdated: new Date().toISOString(),
                totalAnalyzed: newAllHeadlines.length,
                totalHeadlines: allHeadlines.length,
                headlines: allHeadlines,
              };

              if (!fs.existsSync('data')) fs.mkdirSync('data');
              fs.writeFileSync('data/headlines.json', JSON.stringify(output, null, 2));
              fs.writeFileSync('data/all-headlines.json', JSON.stringify(allOutput, null, 2));
              console.log('Analysis complete. Files updated with new headlines appended.');
              
              // Enhanced Summary
              console.log('\n=== SUMMARY ===');
              console.log(`Total targeted search queries: ${TOTAL_REQUESTS}`);
              console.log(`Articles per query: ${ARTICLES_PER_REQUEST}`);
              console.log(`Total unique articles fetched: ${allArticles.length}`);
              console.log(`Total articles analyzed: ${analyzedHeadlines.length}`);
              console.log(`Headlines with fallacies: ${fallacyHeadlines.length}`);
              console.log(`New unique fallacy headlines added: ${newFallacyHeadlines.length}`);
              console.log(`Excluded keywords: ${EXCLUDE_KEYWORDS.join(', ')}`);
              
              // Topic breakdown
              console.log('\n=== TOPIC COVERAGE ===');
              const topics = [
                'Gender/Transgender', 'Protests/Civil Unrest', 'Systemic Racism', 
                'Immigration', 'Israel-Palestine', 'Climate Change', 
                'Elections/Politics', 'Public Health', 'Crime/Policing', 'Technology/AI'
              ];
              topics.forEach((topic, i) => {
                console.log(`${topic}: ${Math.floor(i * 2 * ARTICLES_PER_REQUEST / TOTAL_REQUESTS * allArticles.length)} queries processed`);
              });
              
            } catch (error) {
              console.error('Error in main function:', error);
              process.exit(1);
            }
          }

          main();
          EOL
          node fetch-analyze.js

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add data/headlines.json data/all-headlines.json
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update targeted news headlines with fallacy analysis - $(date)"
            git push
          fi
